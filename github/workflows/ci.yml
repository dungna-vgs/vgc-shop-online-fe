name: Set ENVIRONMENT Variable Based on Multiple Branches

on:
    push:
      branches: ["develop", "ecs-prd"]

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
        ENV: 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Build the Docker image
        env:
          IMAGE: 984118226896.dkr.ecr.ap-southeast-1.amazonaws.com/vgcorp/shop-online-fe
          CONTAINER_REGISTRY: 984118226896.dkr.ecr.ap-southeast-1.amazonaws.com
        run: |
          TAG=${GITHUB_REF##*/}-${GITHUB_SHA::7}
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $CONTAINER_REGISTRY
          docker build --pull -t $IMAGE:$TAG .
          docker push $IMAGE:$TAG

      - name: Detect ENVIRONMENT based on the branch
        run: |
          # Extract branch name from GITHUB_REF
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo $BRANCH_NAME
          # Conditional logic to set ENVIRONMENT variable based on branch name
          case "$BRANCH_NAME" in
            develop)
              echo "ENVIRONMENT=dev" >> $GITHUB_ENV
              echo "CD=true" >> $GITHUB_ENV
              ;;
            ecs-prd)
              echo "ENVIRONMENT=prd" >> $GITHUB_ENV
              echo "CD=true" >> $GITHUB_ENV
              ;;
            *)
              echo "ENVIRONMENT=unknown" >> $GITHUB_ENV
              echo "CD=false" >> $GITHUB_ENV
              echo "Unknown branch. ENVIRONMENT set to 'unknown'."
              ;;
          esac

      - name: Use ENVIRONMENT variable
        run: |
          echo "The ENVIRONMENT variable is set to ${{ env.ENVIRONMENT }}"

      - name: Update image tag in values.yaml
        if: ${{ env.CD == 'true' }}
        env:
          SERVICE_NAME: "shop-online-fe"
        run: |
            IMAGE_TAG=${GITHUB_REF##*/}-${GITHUB_SHA::7}
            # SET THE DISPLAYED USER WITH THE COMMITS THAT ARE ABOUT TO BE MADE
            git config --global user.email "bot@vgcorp.vn"
            git config --global user.name "bot@vgcorp.vn"
            git clone --single-branch -b cicd --depth 1 https://${{ secrets.GIT_ACCESS_TOKEN }}@github.com/vgcorpvn/vgs-${{ env.ENVIRONMENT }}-ecs-workflow.git /tmp/config_repo
            # CHANGE PATH & CHECK CONFIG
            cd /tmp/config_repo/${SERVICE_NAME}
            ls -la

            # REPLACE THE IMAGE WITH NEW TAG
            jq --arg NEW_TAG "${IMAGE_TAG}" '.containerDefinitions[0].image |= sub(":.*$"; ":" + $NEW_TAG)' "task-definition.json" > temp.json

            # Check if the temp.json file is not null
            if [ -s "temp.json" ]; then
                mv temp.json task-definition.json
                cat task-definition.json
            else
                echo "[ERROR] in find and replace new image tag in task_defination.json file"
                exit 1
            fi

            # ADD & COMMIT NEW CHANGED FILE TO GIT
            git add task-definition.json
            git commit -m "VGCorp bot push new ${SERVICE_NAME} with new image tag ${IMAGE_TAG}"

            # TRY TO PUSH THE CODE BACK TO GIT
            for i in {1..3}; do
                echo "[INFO] ${i} attempt to push code to https://github.com/vgcorpvn/vgs-${{ env.ENVIRONMENT }}-ecs-workflow.git"
                git fetch && git pull origin
                git push
                if [[ $? -eq 0 ]]; then
                    echo "[INFO] Update repository successfully"
                    break
                else
                    echo "[ERROR] ${i} attempt was failed."
                fi

                sleep 2

            done

      - name: send telegram message on success
        if: success() # Runs this step only if the 'deploy' job succeeded.
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM__SEND_TO }}
          token: ${{ secrets.TELEGRAM__BOT_TOKEN }}
          message: |
            Deploy ${{ github.event.repository.name }} SUCCEEDED
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            Repository: ${{ github.repository }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

      - name: send telegram message on failure
        if: failure() # Runs this step only if the 'deploy' job failed.
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM__SEND_TO }}
          token: ${{ secrets.TELEGRAM__BOT_TOKEN }}
          message: |
            Deploy ${{ github.event.repository.name }} FAILED
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            Repository: ${{ github.repository }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
